on: [push, pull_request]

jobs:
  armv7_job:
    # The host should always be Linux
    runs-on: ubuntu-18.04
    name: Build on ubuntu-18.04 armv7
    steps:
      - uses: actions/checkout@v2.1.0
      - uses: uraimo/run-on-arch-action@v2.0.5
        name: Run commands
        id: runcmd
        with:
          arch: armv7
          distro: ubuntu18.04

          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          githubToken: ${{ github.token }}
          setup: |
            mkdir -p "${PWD}/artifacts"
            
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"
          
          install: apt-get update -q -y && apt-get -q -y install g++ cmake extra-cmake-modules qttools5-dev qttools5-dev-tools libsdl2-dev libxi-dev libxtst-dev libx11-dev itstool gettext libqt5x11extras5-dev
      # Set an output parameter `uname` for use in subsequent steps
          run: |
            mkdir build && cd ./build
            cmake .. -DCPACK_GENERATOR="DEB" | tee configuring.log
            cmake --build . --target package | tee building.log
            cp ./*.deb /artifacts/
            cp ./*.log /artifacts/
            echo ::set-output name=uname::$(ls)


      - name: Get the output
        # Echo the `uname` output parameter from the `runcmd` step
        run: |
          echo "The uname output was ${{ steps.runcmd.outputs.uname }}"
      - name: Show the artifact
        # Items placed in /artifacts in the container will be in
        # ${PWD}/artifacts on the host.
        run: |
          ls -al "${PWD}/artifacts"
          mkdir art
          cp "${PWD}"/artifacts/*.deb art/
          cp "${PWD}"/artifacts/*.log art/

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: built_binaries
          path: art/
